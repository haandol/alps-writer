---
description: writing dynamodb table cdk code
globs: lib/**/*.ts
alwaysApply: false
---
# DynamoDB Table CDK Best Practices

This guide provides best practices for implementing DynamoDB tables using AWS CDK. The rules outlined here follow the Single Table Design approach, ensuring efficient and cost-effective table management.

---

## Table Configuration

- Use a single table unless a strong justification exists for multiple tables.
- Standardize key naming:
  - Partition key: `PK`
  - Sort key: `SK`
- Default to on-demand capacity mode for cost efficiency.

### CDK Example: Creating a Table

```typescript
const table = new dynamodb.Table(this, 'DataTable', {
  tableName: `${props.namePrefix}DataTable`,
  billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
  partitionKey: { name: 'PK', type: dynamodb.AttributeType.STRING },
  sortKey: { name: 'SK', type: dynamodb.AttributeType.STRING },
  removalPolicy: cdk.RemovalPolicy.RETAIN,
});
```

---

## Single Table Design Implementation Steps

1. Identify Entities
   - List all data entities (e.g., users, orders, products) required by the application.

2. Define Access Patterns
   - Determine how the application will query, filter, and sort data.
   - Example considerations:
     - What queries are needed?
     - How will data be filtered?
     - What sorting orders are required?

3. Design PK/SK Schema
   - Construct partition key (`PK`) and sort key (`SK`) combinations based on access patterns.
   - Example: PK/SK Design
    ```json
    {
      // User profile
      "profile":  {
        "schema": { "PK": "USER#123", "SK": "PROFILE" },
        "description": "user profile",
      },
      // User orders
      "orders": {
        "schema": { "PK": "USER#123", "SK": "ORDER#456" },
        "description": "user orders",
      }
    }
    ```

4. Design Global Secondary Indexes (GSIs)
   - Define GSIs for access patterns that the base table cannot support.

5. Define Item Attributes
   - Determine which attributes each entity type will store.

6. Implement Table in CDK
   - Write CDK code according to the finalized table schema and index design.

---

## Global Secondary Indexes (GSIs)

- Avoid using Local Secondary Indexes (LSIs) due to their tight coupling with the base table.
- Create GSIs only when necessary for access patterns.
- Standardize naming conventions:
  - Indexes: `GS1`, `GS2`, ..., `GSn`
  - Index partition keys: `GSnPK`
  - Index sort keys: `GSnSK`

### CDK Example: Adding GSIs

```typescript
// First global index
table.addGlobalSecondaryIndex({
  indexName: 'GS1',
  partitionKey: { name: 'GS1PK', type: dynamodb.AttributeType.STRING },
  sortKey: { name: 'GS1SK', type: dynamodb.AttributeType.STRING },
  projectionType: dynamodb.ProjectionType.ALL,
});

// Second global index with specific attributes
table.addGlobalSecondaryIndex({
  indexName: 'GS2',
  partitionKey: { name: 'GS2PK', type: dynamodb.AttributeType.STRING },
  sortKey: { name: 'GS2SK', type: dynamodb.AttributeType.STRING },
  projectionType: dynamodb.ProjectionType.INCLUDE,
  nonKeyAttributes: ['attribute1', 'attribute2'],
});
```