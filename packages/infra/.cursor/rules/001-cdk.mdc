---
description: best practices for writing AWS Cloud Development Kit (CDK) code
globs: **/*.ts
alwaysApply: true
---
<rules>
  <dependency-rules>
    - CDK Stacks are the basic units of deployment for AWS services. They should have minimal dependencies on other stacks.
    - If dependencies are unavoidable, follow the best practices outlined in: [cdk-stack-dependency.mdc](mdc:.cursor/rules/cdk/cdk-stack-dependency.mdc)
  </dependency-rules>

  <service-rules>
    When working with AWS CDK, follow these service-specific rules where applicable:
    - DynamoDB: [cdk-dynamodb.mdc](mdc:.cursor/rules/cdk/cdk-dynamodb.mdc)
    - Cognito: [cdk-cognito.mdc](mdc:.cursor/rules/cdk/cdk-cognito.mdc)
    - Lambda: [cdk-lambda.mdc](mdc:.cursor/rules/cdk/cdk-lambda.mdc)
  </service-rules>

  <security-rules>
    - Any stack or construct deployed in a public subnet or serr entry point (e.g., Load Balancers, API Gateways) must comply with security best practices: [cdk-security.mdc](mdc:.cursor/rules/cdk/cdk-security.mdc)
  </security-rules>
</rules>

<prerequisites>
  Before working with AWS CDK, ensure that you have:
  - Node.js 20+ (Infra)
  - Python 3.13+ (Lambda)
  - AWS CLI installed and configured
</prerequisites>

<project-overview>
  <description>
    This project is for infrastructure as code (IaC) using AWS CDK. CDK Key components are:
    - Application: The top-level container that holds one or more stacks and serves as the entry point for CDK execution.
    - Stack: A collection of constructs that maps to a single CloudFormation template.
    - Construct: The basic building block that represents one or more AWS resources.
  </description>

  <executable-entry-point>
    - The executable TypeScript file is stored under: `[PROJECT_ROOT]/bin/infra.ts`
  </executable-entry-point>

  <configuration>
    - The project uses a single configuration file, located at: `[PROJECT_ROOT]/.toml`
    - The configuration file must only be imported in the executable entry point file.
    - The executable file should act solely as orchestration layersâ€”they must not modify stack states directly.
      - All stack logic, resource creation, and state manipulation must be handled inside the respective stacks and constructs.
  </configuration>

</project-overview>

<configuration-validation>
  - The following TypeScript example loads and validates the configuration file using the `joi` library.
  - If the configuration does not match the predefined schema, an error is thrown.
  <example>
    - Here is the example how to validate config:

      ```typescript
      // <project_root>/config/loader.ts

      import * as fs from 'fs';
      import * as path from 'path';
      import * as toml from 'toml';
      import * as joi from 'joi';

      interface IConfig {
        app: {
          ns: string;
          stage: string;
        };
        aws: {
          region: string;
        };
      }

      // Load and parse the configuration file
      const cfg = toml.parse(
        fs.readFileSync(path.resolve(__dirname, '..', '.toml'), 'utf-8')
      );
      console.log('Loaded config:', cfg);

      // Define schema validation
      const schema = joi.object({
        app: joi.object({
          ns: joi.string().required(),
          stage: joi.string().required(),
        }).required(),
        aws: joi.object({
          region: joi.string().required(),
        }).required(),
      }).unknown();

      // Validate the configuration
      const { error } = schema.validate(cfg);
      if (error) {
        throw new Error(`Config validation error: ${error.message}`);
      }

      // Export the validated config
      export const Config: IConfig = {
        ...cfg,
        app: {
          ...cfg.app,
          ns: `${cfg.app.ns}${cfg.app.stage}`,
        },
      };
      ```
    </example>
</configuration-validation>

<resource-tags>
  - AWS resource tagging simplifies grouping, searching, tracking, and cost allocation by project or team.
  - To ensure consistency, resource tagging should be only applied at the end of the executable entry point file using the following code:
  <example>
    ```typescript
    const tags = cdk.Tags.of(app);
    tags.add("namespace", Config.app.ns);
    tags.add("stage", Config.app.stage);
    ```
  </example>
</resource-tags>

<stacks>
  <instructions>
    - An AWS CDK project can have multiple stacks, each serving as a logically distinct and reusable unit.
    - Stacks are the smallest deployable and maintainable units in AWS CDK.
    - Before creating a new stack, ensure that its functionality does not overlap with existing stacks and that it cannot be logically integrated into an existing one. This helps maintain a modular, scalable, and well-structured architecture.
  </instructions>

  <example>
    For an AWS ECS-based architecture, a well-structured project might include:

    1. AuthStack
      - Manages Cognito user authentication.
      - Exists independently of external services.

    2. GatewayStack
      - Hosts the API Gateway.
      - Should remain even if backend services change.

    3. CommonECSStack
      - Creates an AWS ECS Cluster.
      - Must be reusable regardless of individual services.

    4. Mock1ServiceStack
      - Represents an ECS service with its own constructs.
      - Can be modified or deleted independently.

    5. Mock2ServiceStack
      - Another independent ECS service stack.
      - Can be modified or deleted separately from `Mock1ServiceStack`.
  </example>
</stacks>

<naming-conventions>
  <stack-convention>
    - Stack names must be unique within the project.
    - Use the `ns (namespace)` value from the project configuration file as a prefix.
  </stack-convention>

  <construct-convention>
    - Construct names must be unique within their stack.
  </construct-convention>
</conventions>

<deployment>
  - DO NOT use `npm build` command, which is not necessary, just use `cdk deploy` or `cdk sync` for deployment and synthesization.
</deployment>

<additional-notes>
  - Do not create `CfnOutput` resources unless explicitly requested by the user. (This prevents unnecessary CloudFormation outputs.)
</additional-notes>
