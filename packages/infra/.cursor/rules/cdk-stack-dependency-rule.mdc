---
description: writing independent stack or resolve dependency problem
globs: *
alwaysApply: true
---
# AWS CDK Stack Dependency Management Guidelines

This document provides a comprehensive guide for writing robust and maintainable infrastructure code using AWS CDK. It covers visualizing stack dependencies, avoiding cyclic dependencies, and safely passing values between stacks.

---

## 1. Stack Dependency Management

### 1.1. Visualizing the Dependency Graph

Analyzing the relationships between stacks beforehand minimizes unnecessary dependencies. Below is an example of a simple stack dependency diagram using Mermaid:

```mermaid
graph TD
    VpcStack --> CommonAppStack
    CommonAppStack --> AuthStack
    AuthStack --> ServiceAppStack
    CommonAppStack --> ServiceAppStack
```

### 1.2. Dependency Hierarchy

- Top-Level Stacks (Long-lived services)
  Stacks such as `LoadBalancerStack`, `APIGatewayStack`, and `DatabaseStack` should be placed at the top to ensure stability. Application stacks (e.g., `ECSServiceStack`) depend on these.
- Lower-Level Stacks (Application services)
  These stacks reference resources provided by the top-level stacks and can be managed independently as long as the underlying resources remain unchanged.
- Independent Stacks
  For example, the `DatabaseStack` should remain independent and be maintained separately from `LoadBalancerStack` or `APIGatewayStack`.

---

## 2. Guidelines for Passing Values Between Stacks

In AWS CDK, it is recommended to use dependency injection via constructor properties to pass values between stacks.

### 2.1. Example: Creating and Passing a Resource

```typescript
// Resource creation stack (creating and exposing the resource)
export class ResourceStack extends cdk.Stack {
  public readonly myResource: SomeResourceType;

  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);
    this.myResource = new SomeResourceType(this, 'MyResource', {
      // Resource properties
    });
  }
}

// Resource consumer stack (using the resource passed via props)
interface ConsumerStackProps extends cdk.StackProps {
  myResource: SomeResourceType;
}

export class ConsumerStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props: ConsumerStackProps) {
    super(scope, id, props);
    new SomeConstruct(this, 'MyConstruct', {
      resource: props.myResource
    });
  }
}
```

In this pattern, the resource is exposed as a public property of its stack and passed to another stack through constructor parameters.

---

## 3. Managing Explicit and Implicit Dependencies

### 3.1. Explicit Dependencies

To ensure a specific deployment order between stacks, you can explicitly add dependencies:

```typescript
const authStack = new AuthStack(app, 'AuthStack', {
  redirectUris: Config.auth.redirectUris,
});

const gatewayStack = new GatewayStack(app, 'GatewayStack', {
  userPool: authStack.userPool,
  userPoolClient: authStack.userPoolClient,
});

// gatewayStack depends on authStack
gatewayStack.addDependency(authStack);
```

### 3.2. Implicit Dependencies and Avoiding Cyclic Dependencies

To prevent cyclic dependencies, consider the following approaches:

1. Resource Re-importation:
   Instead of directly using a resource passed via the constructor, re-import the resource within the stack (e.g., using methods like `fromAttribute`) to limit its scope to the current stack.
2. Creating New Constructs:
   Rather than using methods like `addXXX` to add sub-resources to an existing resource, create a new independent construct.

Example of re-importing API Gateway and Load Balancer:

```typescript
export class ServiceStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props: ServiceProps) {
    super(scope, id, props);

    const restApi = apigw.RestApi.fromRestApiAttributes(this, 'RestApi', {
      restApiId: props.restApiId,
      rootResourceId: props.restApiRootId,
    });
    const loadBalancer = elbv2.ApplicationLoadBalancer.fromApplicationLoadBalancerAttributes(this, 'ALB', {
      loadBalancerArn: props.loadBalancerArn,
      securityGroupId: props.loadBalancerSecurityGroupId,
      vpc: props.cluster.vpc,
    });
  }
}
```

This approach explicitly defines stack relationships and prevents cyclic references.

---

## 4. IaC Prompt Template for AI

Below is a prompt template for AI to generate AWS CDK-based infrastructure code following best practices:

```
# AWS CDK Infrastructure Code Writing Guide

You are an expert in writing infrastructure code using AWS CDK. Please adhere to the following principles and patterns to produce robust and maintainable infrastructure code.

## Project Structure
Organize the project into the following structure:
- `constructs/`: Reusable low-level components
- `stacks/`: CloudFormation stack definitions

## Design Principles
1. Unidirectional Dependency: Maintain dependency flow from constructs to stacks only.
2. Dependency Injection: Pass dependencies via constructor parameters rather than direct references.
3. Property-Based Configuration: Use clear property interfaces instead of hardcoding values.
4. Hierarchical Abstraction: Structure the code from low-level resources → domain-specific components → application stacks.
5. Loose Coupling: Depend on interfaces rather than concrete implementations.

## Implementation Patterns
- Clearly define the responsibilities and boundaries for each resource.
- Extract reusable patterns into separate constructs.
- Separate environment-specific configurations using Context or Props.
- Always pass resource references explicitly.
- Use event patterns to avoid cyclic dependencies when necessary.

## Requirements
[Insert specific infrastructure requirements here]

Based on the guidelines above, write the AWS CDK code (in TypeScript) that meets the requirements. Ensure to include comments explaining the responsibilities of each component and stack.
```

---

## 5. Additional Guidelines for Real Projects

### 5.1. Design Phase
- Create a Resource Dependency Graph: Diagram the dependencies between stacks to clarify relationships.
- Identify Necessary Dependencies: Determine the resources that require cross-stack references and the order of deployment.
- Extract Reusable Patterns: Isolate common patterns into separate constructs for reuse.

### 5.2. Implementation Phase
- Develop from Lower to Upper Layers: Start with basic resources, move to domain-specific components, and then build the final application stacks.
- Adhere to the Single Responsibility Principle: Ensure each stack or construct has a clear, distinct responsibility.
- Define Clear Interfaces: Use property interfaces to maintain loose coupling between components.

### 5.3. Testing Phase
- Write Unit Tests: Validate the functionality of each component with unit tests.
- Perform CDK Synth Validation: Use CDK synth to verify the overall stack configuration and deployment order.
- Check for Cyclic Dependencies: Always inspect the deployment setup for potential cyclic dependency issues before deployment.