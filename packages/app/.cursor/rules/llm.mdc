---
description: Guideline for Implementing with Amazon Bedrock and Langchain AWS
globs: src/**/*.py
alwaysApply: false
---
<prerequisites>
- Use Amazon Bedrock's Converse API
- Use Claude 3.5 Sonnet V2 model, ID: `us.anthropic.claude-3-5-sonnet-20241022-v2:0`
- Use Langchain (`langchain`) and Langchain AWS (`langchain-aws`) libraries
</prerequisites>

<prompt-file-location>
- Always separate prompts into dedicated files
</prompt-file-location>

<instantiate-model>
- Use `ChatBedrockConverse` class to use Bedrock's Converse API
- Example:
```python
from langchain_aws.chat_models import ChatBedrockConverse

llm = ChatBedrockConverse(
    model="us.anthropic.claude-3-5-sonnet-20241022-v2:0",
    temperature=0.33,
    max_tokens=4096,
    # other params...
)
```
</instantiate-model>

<streaming-response>
- Example:
```python
for chunk in llm.stream(messages):
    print(chunk)
```
</streaming-response>

<streaming-tool-calls>
- In streaming, `tool_calls` can be used after all tokens are generated
- Example:
```python
first = True
async for chunk in llm_with_tools.astream(query):
    if first:
        gathered = chunk
        first = False
    else:
        gathered = gathered + chunk

    print(type(gathered.tool_calls[0]["args"])) #   <class 'dict'>
```
</streaming-tool-calls>

<multi-modal-image-input>
- Attatch image to the message, encode image with base64 and put it in the content with `image` type
- Example:
```python
import base64
import httpx
from langchain_core.messages import HumanMessage

image_url = "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
image_data = base64.b64encode(httpx.get(image_url).content).decode("utf-8")
message = HumanMessage(
    content=[
        {"type": "text", "text": "describe the weather in this image"},
        {
            "type": "image",
            "source": {"type": "base64", "media_type": "image/jpeg", "data": image_data},
        },
    ],
)
ai_msg = llm.invoke([message])
```
</multi-modal-image-input>